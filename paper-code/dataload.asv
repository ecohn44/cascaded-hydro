%% ========================================================================
% DATALOAD FUNCTIONS
% ========================================================================

function [inflow, params, sysparams] = dataload()
    % Load and process hydro simulation data from multiple CSV files
    %
    % Outputs:
    %   inflow  - USACE inflow data table
    %   params  - Fitted OLS model parameters for forecasting inflow
    %   sysparams - Reservoir operation parameters
    
    % Define file pa
    tda_inflow_path = '/Users/elizacohn/Desktop/cascaded-hydro/simulation-data/tda-inflow-USACE.csv';
    bon_inflow_path = '/Users/elizacohn/Desktop/cascaded-hydro/simulation-data/bon-inflow-USACE.csv';


    %% USACE Inflow Data
    inflow = readtable(tda_inflow_path);
    inflow.datetime = datetime(inflow.datetime, 'InputFormat', 'yyyy-MM-dd HH:mm:ss');
    
    % Load Dalles inflow data
    % Convert kcfs to m3/s (kcfs -> cfs -> m3/s -> m3/hr)
    inflow.tda_inflow_m3hr = 1000 * cfs_to_m3s(inflow.inflow_kcfs) * 3600;
    
    % Load Bonneville inflow data
    bon_inflow = readtable(bon_inflow_path);
    inflow.bon_inflow_m3hr = bon_inflow.inflow_m3s * 3600;

    %% Seasonal forecasting parameters
    params = struct( ...
        'season', {'wet', 'dry'}, ...     % Tag for season
        'center_day', {157, 275}, ...     % DoY
        'inflow_mean', {2.58e7, 1.06e7}, ...
        'inflow_std', {9.21e6, 2.47e6}, ...
        'outflow_mean', {2.37e7, 9.69e6}, ...
        'outflow_std', {9.12e6, 2.79e6}, ...
        'constant', {-0.0018, -0.0013}, ... % -- DDU Params -- %
        'coef1', {0.836, 0.830}, ...      % inflow_lag1 [m3/hr]
        'coef2', {0.165, 0.169}, ...      % outflow_lag1 [m3/hr]
        'resid_var', {0.0959, 0.295}, ...
        'AR_const', {-0.0004, 0.0020}, ... % -- DIU Params -- %
        'AR_coef', {0.995, 0.950}, ...    % inflow_lag1 [m3/hr]
        'AR_resid_var', {0.1042, 0.3188}, ...
        'omega', {0.172, 0.179}, ... % -- ARCH-X Params -- %
        'alpha', {0.815, 0.796}, ...
        'gamma', {0.00832, 0.0404}, ...
        'error_mean', {0.069, 0.21}, ...
        'error_std', {0.0364, 0.11} ...
    );

    sysparams = struct( ...
        'unit', {1, 2}, ...     % Tag for unit [bon, dalles]
        'a', {0.0026, 4.1}, ...           % hydraulic head parameter 1
        'b', {0.4404, 0.134}, ...         % hydraulic head parameter 2
        'min_ut', {3.12e6, 5.27e6}, ...   % min water release [m3/hr]
        'max_ut', {1.37e7, 1.65e7}, ...   % max water release [m3/hr]
        'min_h', {21.33, 47.24}, ...      % min forebay elevation [m]
        'max_h', {23.49, 50.29}, ...      % max forebay elevation [m]
        'min_V', {7.72e8, 8.36e7}, ...    % min volume [m3]
        'max_V', {9.56e8, 1.33e8}, ...   % max volume [m3]
        'RR_dn', {-642225, -499508}, ... % down ramp rate [m3/hr]
        'RR_up', {611643, 479120}, ...   % up ramp rate [m3/hr]
        'F', {1154, 1780}, ...           % nameplate capacity [MW]
        'SOC', {0.5, 0.5} ...            % init for state of charge
    );

    % Initial volumes (m3), using sysparams derived min/max volumes
    V0_01 = SOC_01*(sysparams(1).max_V - sysparams(1).min_V) + sysparams(1).min_V;
    V0_02 = SOC_02*(sysparams(2).max_V - sysparams(2).min_V) + sysparams(2).min_V;


    %% Compute Piecewise Linear Approximation
    N = 20;  % number of sub-intervals

    for i = 1:numel(sysparams)
        % Compute derived parameters for this unit
        d = sysparams(i);
        
        % Create sub-intervals and midpoints
        [lb, rb, ref] = create_intervals_and_references(d.min_h, d.max_h, N);
        
        % Store in the struct
        sysparams(i).h_lbounds = lb;
        sysparams(i).h_rbounds = rb;
        sysparams(i).h_refvals = ref;

        % Calculate initial volume 
        sysparams(i).V0 = d.SOC(d.max_V - d.min_V);
    end

    
    fprintf('Data loading complete.\n');
end

function m3s = cfs_to_m3s(cfs)
    % Conversion factor: 1 cfs is approximately 0.0283168 mÂ³/s
    conversion_factor = 0.0283168;
    m3s = cfs * conversion_factor;
end


% Function to create N sub-intervals and midpoint references for PWL
function [left_bounds, right_bounds, reference_values] = create_intervals_and_references(min_h, max_h, N)
    % Create N+1 breakpoints to define N intervals
    breakpoints = linspace(min_h, max_h, N+1);  % vector of breakpoints

    % Create interval bounds
    left_bounds  = breakpoints(1:end-1);  % first N points
    right_bounds = breakpoints(2:end);    % last N points

    % Create reference vector with midpoints
    reference_values = (left_bounds + right_bounds) / 2;
end